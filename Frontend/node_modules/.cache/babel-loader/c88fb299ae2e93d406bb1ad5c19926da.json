{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaker\\\\Desktop\\\\SES-2A-Team2\\\\Frontend\\\\src\\\\pages\\\\Recommendations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport SubjectCard from '../components/SubjectCard';\nimport { AppContext } from '../AppContext';\nimport InterestsCard from '../components/InterestsCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Recommendations() {\n  _s();\n\n  const data = useContext(AppContext);\n  const [results, setResults] = useState({});\n  const [toggle, setToggle] = useState(false);\n\n  const findSubjects = recommendations => {\n    let subject_obj = {};\n    let subject_ids = recommendations;\n    data.forEach(elem => {\n      if (subject_ids.includes(elem._id)) {\n        subject_obj[elem._id] = elem;\n      }\n    });\n    setResults(subject_obj);\n  };\n\n  const findRecommendations = student => {\n    fetch(`http://localhost:8080/api/recommendation`, {\n      method: 'POST',\n      body: JSON.stringify({\n        student\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async res => {\n      let json = await res.json(res);\n      findSubjects(json.recommendations);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \" Course Recommendations \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InterestsCard, {\n        findRecommendations: findRecommendations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), Object.keys(results).slice(0, 5).map((subject, key) => /*#__PURE__*/_jsxDEV(SubjectCard, {\n        coursesUpdated: () => console.log(test),\n        subject: results[subject]\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Recommendations, \"9sjchze3gzfE5RapfK1cStdp0t4=\");\n\n_c = Recommendations;\nexport default Recommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"sources":["C:/Users/jaker/Desktop/SES-2A-Team2/Frontend/src/pages/Recommendations.js"],"names":["React","useState","useContext","CssBaseline","Typography","Container","Grid","SubjectCard","AppContext","InterestsCard","Recommendations","data","results","setResults","toggle","setToggle","findSubjects","recommendations","subject_obj","subject_ids","forEach","elem","includes","_id","findRecommendations","student","fetch","method","body","JSON","stringify","headers","then","res","json","catch","err","console","log","Object","keys","slice","map","subject","key","test"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SubjectCard from '../components/SubjectCard';\r\n\r\nimport { AppContext } from '../AppContext';\r\nimport InterestsCard from '../components/InterestsCard';\r\n\r\nfunction Recommendations() {  \r\n    \r\n    const data = useContext(AppContext);\r\n    const [results, setResults] = useState({});\r\n    const [toggle, setToggle] = useState(false);\r\n   \r\n    const findSubjects = (recommendations) => {\r\n\r\n        let subject_obj = {};\r\n        let subject_ids = recommendations;\r\n        data.forEach(elem => {\r\n            if (subject_ids.includes(elem._id)) {\r\n                subject_obj[elem._id] = elem\r\n            }\r\n        })\r\n\r\n        setResults(subject_obj);\r\n\r\n    }\r\n\r\n    const findRecommendations = (student) => {  \r\n        fetch(`http://localhost:8080/api/recommendation`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({student}),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }).then(async (res) => {\r\n            let json = await res.json(res)\r\n            findSubjects(json.recommendations)\r\n        }).catch((err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <Container maxWidth={false}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={8}>\r\n                        <Typography variant='h5'> Course Recommendations </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <br />\r\n                <InterestsCard findRecommendations={findRecommendations}></InterestsCard>\r\n                <br />\r\n                {Object.keys(results).slice(0, 5).map((subject, key) => (\r\n                    <SubjectCard coursesUpdated={() => console.log(test)} key={key} subject={results[subject]} />\r\n                ))}\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Recommendations;\r\n"]},"metadata":{},"sourceType":"module"}