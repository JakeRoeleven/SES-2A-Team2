{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database'; // TODO: Move to env file\n\nconst config = {\n  apiKey: \"AIzaSyAJmVlyeF0BJeeI11wpKFfrdZED4xto5Dw\",\n  authDomain: \"ses-2a-team-2.firebaseapp.com\",\n  databaseURL: \"https://ses-2a-team-2-default-rtdb.firebaseio.com\",\n  projectId: \"ses-2a-team-2\",\n  storageBucket: \"ses-2a-team-2.appspot.com\",\n  messagingSenderId: \"445897167340\",\n  appId: \"1:445897167340:web:08d3b919a7a2c3cb8870c9\",\n  measurementId: \"G-701ZRD9QSB\"\n};\nvar provider = new app.auth.GoogleAuthProvider();\n\nclass Firebase {\n  constructor() {\n    if (!app.apps.length) {\n      app.initializeApp(config);\n    }\n\n    this.auth = app.auth();\n    this.database = app.database();\n  }\n\n  login(email, password) {\n    return this.auth.signInWithEmailAndPassword(email, password);\n  }\n\n  loginwithGoogle() {\n    return this.auth.signInWithPopup(provider);\n  }\n\n  logout() {\n    return this.auth.signOut();\n  }\n\n  resetPassword() {\n    return this.auth.resetPassword();\n  }\n\n  async register(email, password) {\n    await this.auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  addQuote(quote) {\n    if (!this.auth.currentUser) {\n      return alert('Not authorized');\n    }\n\n    return this.db.doc(`users/${this.auth.currentUser.uid}`).set({\n      quote\n    });\n  }\n\n  isInitialized() {\n    return new Promise(resolve => {\n      this.auth.onAuthStateChanged(resolve);\n    });\n  }\n\n  getCurrentUsername() {\n    return this.auth.currentUser && this.auth.currentUser.email;\n  }\n\n  getCurrentUser() {\n    return this.auth.currentUser;\n  }\n\n  showNavBar() {\n    let show = false;\n\n    if (!!this.auth.currentUser) {\n      show = true;\n    } else {\n      console.log(\"No current user\");\n    }\n\n    return show;\n  }\n\n}\n\nexport default new Firebase();","map":{"version":3,"sources":["C:/Users/jaker/Desktop/SES-2A-Team2/Frontend/src/firebase.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","Firebase","constructor","apps","length","initializeApp","database","login","email","password","signInWithEmailAndPassword","loginwithGoogle","signInWithPopup","logout","signOut","resetPassword","register","createUserWithEmailAndPassword","addQuote","quote","currentUser","alert","db","doc","uid","set","isInitialized","Promise","resolve","onAuthStateChanged","getCurrentUsername","getCurrentUser","showNavBar","show","console","log"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP,C,CAEA;;AACA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,mDAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWA,IAAIC,QAAQ,GAAG,IAAIV,GAAG,CAACW,IAAJ,CAASC,kBAAb,EAAf;;AAEA,MAAMC,QAAN,CAAe;AAEXC,EAAAA,WAAW,GAAG;AAEV,QAAI,CAACd,GAAG,CAACe,IAAJ,CAASC,MAAd,EAAsB;AAClBhB,MAAAA,GAAG,CAACiB,aAAJ,CAAkBhB,MAAlB;AACH;;AAED,SAAKU,IAAL,GAAYX,GAAG,CAACW,IAAJ,EAAZ;AACA,SAAKO,QAAL,GAAgBlB,GAAG,CAACkB,QAAJ,EAAhB;AAEH;;AAEDC,EAAAA,KAAK,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACnB,WAAO,KAAKV,IAAL,CAAUW,0BAAV,CAAqCF,KAArC,EAA4CC,QAA5C,CAAP;AACH;;AAEDE,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKZ,IAAL,CAAUa,eAAV,CAA0Bd,QAA1B,CAAP;AACH;;AAEDe,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKd,IAAL,CAAUe,OAAV,EAAP;AACH;;AAEDC,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKhB,IAAL,CAAUgB,aAAV,EAAP;AACH;;AAEa,QAARC,QAAQ,CAACR,KAAD,EAAQC,QAAR,EAAkB;AAC5B,UAAM,KAAKV,IAAL,CAAUkB,8BAAV,CAAyCT,KAAzC,EAAgDC,QAAhD,CAAN;AACH;;AAEDS,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,QAAI,CAAC,KAAKpB,IAAL,CAAUqB,WAAf,EAA4B;AACxB,aAAOC,KAAK,CAAC,gBAAD,CAAZ;AACH;;AAED,WAAO,KAAKC,EAAL,CAAQC,GAAR,CAAa,SAAQ,KAAKxB,IAAL,CAAUqB,WAAV,CAAsBI,GAAI,EAA/C,EAAkDC,GAAlD,CAAsD;AACzDN,MAAAA;AADyD,KAAtD,CAAP;AAGH;;AAEDO,EAAAA,aAAa,GAAG;AACZ,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,WAAK7B,IAAL,CAAU8B,kBAAV,CAA6BD,OAA7B;AACH,KAFM,CAAP;AAGH;;AAEDE,EAAAA,kBAAkB,GAAG;AACjB,WAAO,KAAK/B,IAAL,CAAUqB,WAAV,IAAyB,KAAKrB,IAAL,CAAUqB,WAAV,CAAsBZ,KAAtD;AACH;;AAEDuB,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKhC,IAAL,CAAUqB,WAAjB;AACH;;AAEDY,EAAAA,UAAU,GAAG;AAET,QAAIC,IAAI,GAAG,KAAX;;AAEA,QAAI,CAAC,CAAC,KAAKlC,IAAL,CAAUqB,WAAhB,EAA6B;AACzBa,MAAAA,IAAI,GAAG,IAAP;AACH,KAFD,MAEO;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH;;AAED,WAAOF,IAAP;AACH;;AApEU;;AAwEf,eAAe,IAAIhC,QAAJ,EAAf","sourcesContent":["import app from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\n// TODO: Move to env file\r\nconst config = {\r\n    apiKey: \"AIzaSyAJmVlyeF0BJeeI11wpKFfrdZED4xto5Dw\",\r\n    authDomain: \"ses-2a-team-2.firebaseapp.com\",\r\n    databaseURL: \"https://ses-2a-team-2-default-rtdb.firebaseio.com\",\r\n    projectId: \"ses-2a-team-2\",\r\n    storageBucket: \"ses-2a-team-2.appspot.com\",\r\n    messagingSenderId: \"445897167340\",\r\n    appId: \"1:445897167340:web:08d3b919a7a2c3cb8870c9\",\r\n    measurementId: \"G-701ZRD9QSB\"\r\n};\r\n\r\nvar provider = new app.auth.GoogleAuthProvider();\r\n\r\nclass Firebase {\r\n\r\n    constructor() {\r\n       \r\n        if (!app.apps.length) {\r\n            app.initializeApp(config);\r\n        }\r\n\r\n        this.auth = app.auth();\r\n        this.database = app.database();\r\n    \r\n    }\r\n\r\n    login(email, password) {\r\n        return this.auth.signInWithEmailAndPassword(email, password);\r\n    }\r\n\r\n    loginwithGoogle() {\r\n        return this.auth.signInWithPopup(provider)\r\n    };\r\n\r\n    logout() {\r\n        return this.auth.signOut();\r\n    }\r\n\r\n    resetPassword() {\r\n        return this.auth.resetPassword();\r\n    }\r\n\r\n    async register(email, password) {\r\n        await this.auth.createUserWithEmailAndPassword(email, password);\r\n    }\r\n\r\n    addQuote(quote) {\r\n        if (!this.auth.currentUser) {\r\n            return alert('Not authorized');\r\n        }\r\n\r\n        return this.db.doc(`users/${this.auth.currentUser.uid}`).set({\r\n            quote,\r\n        });\r\n    }\r\n\r\n    isInitialized() {\r\n        return new Promise((resolve) => {\r\n            this.auth.onAuthStateChanged(resolve);\r\n        });\r\n    }\r\n\r\n    getCurrentUsername() {\r\n        return this.auth.currentUser && this.auth.currentUser.email;\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return this.auth.currentUser;\r\n    }\r\n\r\n    showNavBar() {\r\n\r\n        let show = false \r\n\r\n        if (!!this.auth.currentUser) {\r\n            show = true\r\n        } else {\r\n            console.log(\"No current user\")\r\n        }\r\n\r\n        return show;\r\n    }\r\n\r\n}\r\n\r\nexport default new Firebase();\r\n"]},"metadata":{},"sourceType":"module"}